type ClienteUser @aws_iam @aws_api_key {
  id: ID!
  name: String
  cpf: String
  tel: String
  endereco: String
  email: String
  password: String
  whatsapp: Boolean
  rua: String
  cidade: String
  estado: String
  cep: String
  foto: String
  biografia: String
  avaliacao: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelClienteUserConnection @aws_api_key @aws_iam {
  items: [ClienteUser]!
  nextToken: String
}

input ModelClienteUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  cpf: ModelStringInput
  tel: ModelStringInput
  endereco: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  whatsapp: ModelBooleanInput
  rua: ModelStringInput
  cidade: ModelStringInput
  estado: ModelStringInput
  cep: ModelStringInput
  foto: ModelStringInput
  biografia: ModelStringInput
  avaliacao: ModelStringInput
  and: [ModelClienteUserFilterInput]
  or: [ModelClienteUserFilterInput]
  not: ModelClienteUserFilterInput
}

type Query {
  getClienteUser(id: ID!): ClienteUser @aws_api_key @aws_iam
  listClienteUsers(filter: ModelClienteUserFilterInput, limit: Int, nextToken: String): ModelClienteUserConnection @aws_api_key @aws_iam
}

input ModelClienteUserConditionInput {
  name: ModelStringInput
  cpf: ModelStringInput
  tel: ModelStringInput
  endereco: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  whatsapp: ModelBooleanInput
  rua: ModelStringInput
  cidade: ModelStringInput
  estado: ModelStringInput
  cep: ModelStringInput
  foto: ModelStringInput
  biografia: ModelStringInput
  avaliacao: ModelStringInput
  and: [ModelClienteUserConditionInput]
  or: [ModelClienteUserConditionInput]
  not: ModelClienteUserConditionInput
}

input CreateClienteUserInput {
  id: ID
  name: String
  cpf: String
  tel: String
  endereco: String
  email: String
  password: String
  whatsapp: Boolean
  rua: String
  cidade: String
  estado: String
  cep: String
  foto: String
  biografia: String
  avaliacao: String
}

input UpdateClienteUserInput {
  id: ID!
  name: String
  cpf: String
  tel: String
  endereco: String
  email: String
  password: String
  whatsapp: Boolean
  rua: String
  cidade: String
  estado: String
  cep: String
  foto: String
  biografia: String
  avaliacao: String
}

input DeleteClienteUserInput {
  id: ID!
}

type Mutation {
  createClienteUser(input: CreateClienteUserInput!, condition: ModelClienteUserConditionInput): ClienteUser @aws_api_key @aws_iam
  updateClienteUser(input: UpdateClienteUserInput!, condition: ModelClienteUserConditionInput): ClienteUser @aws_api_key @aws_iam
  deleteClienteUser(input: DeleteClienteUserInput!, condition: ModelClienteUserConditionInput): ClienteUser @aws_api_key @aws_iam
}

input ModelSubscriptionClienteUserFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  cpf: ModelSubscriptionStringInput
  tel: ModelSubscriptionStringInput
  endereco: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  password: ModelSubscriptionStringInput
  whatsapp: ModelSubscriptionBooleanInput
  rua: ModelSubscriptionStringInput
  cidade: ModelSubscriptionStringInput
  estado: ModelSubscriptionStringInput
  cep: ModelSubscriptionStringInput
  foto: ModelSubscriptionStringInput
  biografia: ModelSubscriptionStringInput
  avaliacao: ModelSubscriptionStringInput
  and: [ModelSubscriptionClienteUserFilterInput]
  or: [ModelSubscriptionClienteUserFilterInput]
}

type Subscription {
  onCreateClienteUser(filter: ModelSubscriptionClienteUserFilterInput): ClienteUser @aws_subscribe(mutations: ["createClienteUser"]) @aws_api_key @aws_iam
  onUpdateClienteUser(filter: ModelSubscriptionClienteUserFilterInput): ClienteUser @aws_subscribe(mutations: ["updateClienteUser"]) @aws_api_key @aws_iam
  onDeleteClienteUser(filter: ModelSubscriptionClienteUserFilterInput): ClienteUser @aws_subscribe(mutations: ["deleteClienteUser"]) @aws_api_key @aws_iam
}
